# container-centric go webapp CI/CD pipeline
# 1. builds and pushes a container
# 2. tests using build artifacts APP.test
# 3. re-pushes container to cloud

stages:
  - diagnostic
  - build
  - test
  - publish
  - staging
  - deploy

# WIP
#cache:
#  untracked: true
#  key: $CI_COMMIT_REF_SLUG
#  paths:
#    - $GOPATH/src/github.com

variables:
  APP: $CI_PROJECT_NAME
  AWS_DEFAULT_REGION: us-west-2
  AWS_REGISTRY_IMAGE: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CI_PROJECT_NAME:$CI_BUILD_REF_SLUG

diagnostic:
  stage: diagnostic
  image: golang:alpine
  script:
    - env | sort
    - pwd
    - ls -lR $GOPATH

build:
  stage: build
  image: golang:alpine
  artifacts:
    paths:
      - $APP
      - $APP.test
  variables:
      WORKDIR: "$GOPATH/go/$(expr $CI_PROJECT_URL : 'https://\\(.*\\)')"
  script:
    - "export WORKDIR=$GOPATH/go/$(expr $CI_PROJECT_URL : 'https://\\(.*\\)')"
    - mkdir -p $WORKDIR
    - mv $CI_PROJECT_DIR/* $WORKDIR/
    - cd $WORKDIR
    - go get $(go list ./... | grep -v /vendor/)
    - go test -c -o $APP.test
    - go build -o $APP

test:
  stage: test
  image: $CI_REGISTRY_IMAGE
  variables:
    GIT_STRATEGY: none
  script:
    - ./$APP.test

# XXX or "contain"
publish:
  stage: publish
  image: docker
  variables:
    GIT_STRATEGY: none
  services:
    # runner should mount docker.sock instead of services: docker:dind
    - docker:dind
  script:
    - docker info
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE

# WIP
# XXX can we AWS deploy straight from gitlab's container registry?
publish_aws:
  stage: publish
  image: docker
  variables:
    GIT_STRATEGY: none
  before_script:
    - '[ -z "$AWS_ACCOUNT_ID" ] && { echo AWS_ACCOUNT_ID missing; exit 1; }'
  script:
    - aws --version

# WIP
staging_aws:
  stage: staging
  image:
    name: anigeo/awscli
    entrypoint: ["/bin/sh", "-c"]
  variables:
    GIT_STRATEGY: none
  environment:
    name: staging
    url: http://staging.example.com/
  before_script:
    - '[ -z "$AWS_ACCESS_KEY" ] && { echo AWS_ACCESS_KEY missing; exit 1; }'
    - '[ -z "$AWS_SECRET_ACCESS_KEY" ] && { echo AWS_SECRET_ACCESS_KEY missing; exit 1; }'
  script:
    - aws --version
    - aws ecs deploy ...
  only:
    - master

# WIP
production_aws:
  stage: deploy
  image:
    name: anigeo/awscli
    entrypoint: ["/bin/sh", "-c"]
  variables:
    GIT_STRATEGY: none
  environment:
    name: production
    url: https://example.com/
  script:
    - aws --version
  when: manual
  only:
    - master
